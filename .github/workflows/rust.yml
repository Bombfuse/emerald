on: 
  pull_request:
    branches:
      - master
      - development

name: Build

jobs:
  build:
    name: X Compile
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, target: 'x86_64-pc-windows-gnu' }
          - { os: ubuntu-latest, target: 'wasm32-unknown-unknown' }
          - { os: macos-latest, target: 'aarch64-apple-ios' }
          - { os: macos-latest, target: 'x86_64-apple-ios' }
        include:
          - os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev gcc-mingw-w64 libsdl2-dev

    steps:
      - uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
      - name: Workaround MinGW issue # https://github.com/rust-lang/rust/issues/47048
        if: runner.os == 'Linux' && matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo cp /usr/x86_64-w64-mingw32/lib/dllcrt2.o  ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/dllcrt2.o
          sudo cp /usr/x86_64-w64-mingw32/lib/crt2.o  ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/crt2.o
          echo "[target.x86_64-pc-windows-gnu]" >> ~/.cargo/config
          echo "linker = \"/usr/bin/x86_64-w64-mingw32-gcc\"" >> ~/.cargo/config
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --target=${{ matrix.config.target }}

          
  test:
    name: Test
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, target: 'x86_64-unknown-linux-gnu' }
          - { os: macos-latest, target: 'x86_64-apple-darwin' }
          - { os: windows-latest, target: 'x86_64-pc-windows-msvc' }
        include:
          - os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev gcc-mingw-w64 libsdl2-dev

    steps:
      - uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --lib --all-targets --target=${{ matrix.config.target }}


  android:
    name: Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: cargo apk
        run: |
          rustup target add aarch64-linux-android
          cargo update
          cargo install cargo-apk
          cd emerald
          cargo apk build --lib -p emerald